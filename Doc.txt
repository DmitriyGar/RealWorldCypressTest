********************************
 Template literals allow multiline strings, without using \n
let name = "John";
let text = `Welcome, ${name}`;

********************************
 Data types: 
- string
- number
- boolean
- null
- undefined

********************************
 Objects:

var customer = {
firstName: 'John',
lastName: 'Smith'
}

********************************
 Arrays:

var car = ["volvo", "toyota", "honda"]
console.log(car[0])
********************************

 for of loop:

var cars = ["volvo", "toyota", "honda"]
for (let car of cars){
console.log(car)
}
********************************

 for Each:

var cars = ["volvo", "toyota", "honda"]
cars.forEach( car => {
console.log(car)} )

********************************
 Functions:

//Declaritive:
function helloOne(){
console.log("Hello One");
}

//Anonymous:
var helloTwo = function(){
console.log("Hello Two!");
}

//ES6 or arrow function:
var helloThree = () => {
console.log("Hello Three!");
}

//Function with arguments:
function helloFour(name){
console.log(name);
}
********************************

//Importing functions/classes:
	//file1:
export function resultMultiply(number1, number2){
    console.log(`${number1}*${number2}=`+number1*number2)
}	
	//add parametr to package.json:
"type":"module"
	//file2:
import {resultMultiply}  from '../helpers/helpers.js'
resultMultiply(5,7)

********************************

//Importing everything:

import * as helpers from '../helpers/helpers.js'
helpers.resultMultiply(2,3)

********************************

Load project:

1. git clone

2. open project in VS Code 

3. terminal -> npm install -force

4. terminal -> npm start (App is loaded)

5. terminal -> npm install cypress --save-dev

6. Config cypress in the progect (cypress.config.js)

7. terminal -> npx cypress open (Cypress is loaded)

******************************************

describe('Our First Suite', ()=>{

    describe('Our suite section', () => {

        beforeEach('code before each test', () =>{
            //code
        })

        it('some test', ()=> {

        })  
    })

    it('first test', ()=> {

    })  
})

describe() / context() - every spec file starts with it, description what to test
beforeEach() - preconditions for every test
it() - test

********************************************

Set web elements / locators

it('first test', ()=> {

		//by Tag name
        cy.get('input')
        
        //by ID
        cy.get('#inputEmail')

        //by Class name
        cy.get('.input-full-width')

        //by Class value
        cy.get('[class="input-full-width size-medium shape-rectangle"]')

        //by Attribute name
        cy.get('[placeholder]')

        //by Attribute name and value
        cy.get('[placeholder="Email"]')

        //by Tag name and Attribute with value
        cy.get('input[placeholder="Email"]')

        //by two different attributes
        cy.get('[placeholder="Email"][fullwidth]')

        //by tag name, Attribute with value, ID and Class name
         cy.get('input[placeholder="Email"]#inputEmail.input-full-width')

        //the most recommended way by Cypress (via added own attributes into the app)
        cy.get('[data-cy="imputEmail1"]')
		
		// by contains 
		cy.contains('[id=Email]','Form Layouts')
		
		//by children
		cy.get('div[class="offset-sm-3 col-sm-9"').children('button[status="primary"]')
        
		//Gets the 2nd child in td column
		cy.get("tr td:nth-child(2)")       
		
		//by parent	 
		cy.get('button[status="primary"]').parent('div[class="offset-sm-3 col-sm-9"')
		
		//by find parent and to find button in that parent
		cy.get('#inputEmail3').parents('form').find('button')
		
		//with assertion 
		cy.get('#inputEmail3').parents('form').find('button').should('contain','Sign in')
		
		//traveling in DOM
		cy.get('#inputEmail3')
        .parents('form')
        .find('button')
        .should('contain','Sign in')
        .parents('form')
        .find('nb-checkbox')
        .click()


}) 

*************************************************************

Run test

 it('first test', ()=> {
        
		//open the app via Cypress with root path of the app
        cy.visit('/')                 
		
		// click at any element contains 'Forms'
        cy.contains('Forms').click()      
		
		// click at any element contains 'Form Layouts'
        cy.contains('Form Layouts').click()

        //by Tag name
        cy.get('input')
		
************************************************************

//Then and Wrap methods:

it.only('next test',() => {
    cy.visit('/')
    cy.contains('Forms').click();
    cy.contains('Form Layouts').click()

    cy.contains('nb-card','Using the Grid').then(firstForm => {
        //JQuery format:
        const emailLabelFirst = firstForm.find('[for="inputEmail1"]').text()
        const passwordLabelFirst = firstForm.find('[for="inputPassword2"]').text()
        expect(emailLabelFirst).to.equal('Email')
        expect(passwordLabelFirst).to.equal('Password')

        //wrap into CY
        cy.wrap(firstForm).find('[for="inputEmail1"]').should('contain','Email')
    })
})

*************************************************************

Methods:
Methods are functions that are stored as object properties. 

function person(name, age) {
  this.name = name;  
  this.age = age;
  this.changeName = function (name) {
    this.name = name;
  }
}

var p = new person("David", 21);
p.changeName("John");

***********************************************************

ARRAYS:

var arr = new Array(3, 6, 8);
document.write(arr[1]);

////////OR/////////
var courses = new Array();
courses[0] = "HTML";
courses[1] = "CSS";
courses[2] = "JS";


///////Assotiative Arrays: //////

var person = []; //empty array
person["name"] = "John";
person["age"] = 46;
document.write(person["age"]);

In JavaScript, arrays always use numbered indexes.
If you use a named index, JavaScript will redefine the array to a standard object.

//////////////////// ADD or REMOVE elements //////////////

const numbers = [2, 3, 4]

Add at the end of array:
		numbers.push(5, 6)
		
Remove at the end of array:
		numbers.pop(5)
		
Add at the specified position of array:
		numbers.splice(2,0,'a','b')

Remove at the specified position of array:
		numbers.splice(2,1)

Add at the beginning of array:
		numbers.unshift(1)
		
Remove at the beginning of array:
		numbers.shift()

/////////////////////
	const numbers = [1,-1,3,2]

	numbers.sort()  - sort array

	numbers.reverse() - reverse array

	numbers.filter(value=> value<=0) - filter array (by positive numbers)
	
	numbers.map(n=>)

////////sort array with objects (upper/lowercase are sorted by ASCII)
  const cources = {  
   {id: 1, name: 'Node.js'},
   {id: 2, name: 'javaScript'}
  }
  numbers.sort(funxtion(a,b){
   const nameA = a.name.toLowerCase()
   const nameB = b.name.toLowerCase()
   if(nameA<nameB) return -1;
   else if (nameA>nameB) return 1;
  return 0;
  )
//////////////////////




***********************************************************

To get a random number between 1-10, use Math.random(), which gives you a number between 0-1. Then multiply the number by 10, and then take Math.ceil() from it: Math.ceil(Math.random() * 10)

***********************************************************

Set interval:

function myAlert() {
    alert("Hi");
}
setInterval(myAlert, 3000);

////
This will call the myAlert function every 3 seconds (1000 ms = 1 second).

***********************************************************

Date Object:

var d = new Date();
var d = new Date(milliseconds)
var d = new Date(dateString)
var d = new Date(year, month, day, hours, minutes, seconds, milliseconds)

getFullYear()
Получить год (из 4 цифр)

getMonth()
Получить месяц, от 0 до 11.

getDate()
Получить число месяца, от 1 до 31.

getHours(), getMinutes(), getSeconds(), getMilliseconds()
Получить соответствующие компоненты.

// 31 января 2013
var d = new Date(2013, 0, 31); 

//Fri Jan 02 1970 00:00:00
var d1 = new Date(86400000);

//Fri Jan 02 2015 10:42:00
var d2 = new Date("January 2, 2015 10:42:00");

//Sat Jun 11 1988 11:42:00
var d3 = new Date(88,5,11,11,42,0,0);

//hours is equal to the current hour
var hours = d.getHours();

//print date 2023-08-22T10:32:37.592Z
console.log( new Date().toISOString())

//print date 2023-08-22
console.log( new Date().toISOString().slice(0,10))

//print date 22.08.2023
console.log( new Date().toISOString().slice(0,10).split('-').reverse().join('.'))


function printTime() {
  var d = new Date();
  var hours = d.getHours();
  var mins = d.getMinutes();
  var secs = d.getSeconds();
  //The innerHTML property sets or returns the HTML content of an element.
  document.body.innerHTML = hours+":"+mins+":"+secs;
}
setInterval(printTime, 1000);

//////////////////////////////
var date2 = new Date();
var options = {
  era: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  weekday: 'long',
  timezone: 'UTC',
  hour: 'numeric',
  minute: 'numeric',
  second: 'numeric'
}
// 8/27/2023, 1:42:20 PM
console.log(date2.toLocaleString("en-US", `${options.month} ${options.day} ${options.year}`))
// воскресенье, 27 августа 2023 г. от Рождества Христова в 13:37:05 
console.log( date2.toLocaleString("ru", options) )
// Sunday, August 27, 2023 Anno Domini at 1:37:05 PM 
console.log( date2.toLocaleString("en-US", options) ) 

***********************************************************

DOM / Select elements in DOM:

//finds element by id
document.getElementById(id)

//finds elements by class name
document.getElementsByClassName(name)

//finds elements by tag name
document.getElementsByTagName(name)

//getElementById method is used to select the element with id="demo" and change its content:
var elem = document.getElementById("demo");
elem.innerHTML = "Hello World!";

**********************************************************

//calling the function in window.onload to make sure the HTML is loaded
window.onload = function() {
    var p = document.createElement("p");
    var node = document.createTextNode("This is new");
    p.appendChild(node);

    var parent = document.getElementById("demo");
    var child = document.getElementById("p1");
    parent.replaceChild(p, child);
};

**********************************************************

ES6 MAP:
(key, value)

let map = new Map([['k1', 'v1'], ['k2', 'v2']]);
console.log(map.size); //20

set(key, value) - Adds a specified key/value pair to the map. If the specified key already exists, value corresponding to it is replaced with the specified value.

get(key) - Gets the value corresponding to a specified key in the map. If the specified key doesn't exist, undefined is returned.

has(key) - Returns true if a specified key exists in the map and false otherwise.

delete(key) - Deletes the key/value pair with a specified key from the map and returns true. Returns false if the element does not exist.

clear() - Removes all key/value pairs from map.

keys() - Returns an Iterator of keys in the map for each element.

values() - Returns an Iterator of values in the map for each element.

entries() - Returns an Iterator of array[key, value] in the map for each element.

**********************************************************

ES6 SET:
A Set object can be used to hold unique values

let set = new Set();
set.add(5).add(9).add(59).add(9);
console.log(set.has(9));   //true
for (let v of set.values())
console.log(v);   // 5 9 59

add(value) - Adds a new element with the given value to the Set.
delete(value) - Deletes a specified value from the set.
has(value) - Returns true if a specified value exists in the set and false otherwise.
clear() - Clears the set.
values() - Returns an Iterator of values in the set.

***********************************************************

Add custom commands for Cypress:

//open commands.js file and add own command:
Cypress.Commands.add('openHomePage',()=>{
    cy.visit('/')
})

//open needed js file and use this command:
cy.openHomePage()

***********************************************************

Getters and Setters

get and set - should be added before functions inside objects to get or set the value

***********************************************************

API:

cy.intercept() - set this command before ui steps to intercept each request

////////
it ('api test', () =>{ 
cy.intercept('POST','https://api.realworld.io/api/articles/').as('postArticles')

cy.get('login').type('username)
cy.get('password').type(password)
cy.get('submit').click()

// v1: "cy.wait('@postArticles').then (xhr =>{" or v2:
cy.wait('@postArticles')
	cy.get('@postArticles').then (xhr =>{
		console.log(xhr)
	expect(xhr.response.statusCode).to.equal(200)
	expect(xhr.request.body.article.body).to.equal('body of article...')
	expect(xhr.response.body.article.description).to.equal('description...')
	}
)}
////////

cy.intercept('GET', 'http://localhost:3001/transactions/public', { fixture: 'test_transactions.json' }).as('getTransaction')

////////

cy.intercept('POST', '**/transactions', req => {

            req.reply(res => {
                expect(res.body.transaction.description).to.equal(description)
                req.body.description = 'TEST1234'
                res.body.transaction.description = "TEST123"
            })
        }).as('postTransaction')
		
////////

***********************************************************

API - request:

////////
const transId='183VHWyuQMS'
const comment='comment12'
cy.request({
            url: 'http://localhost:3001/comments/'+transId,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json, text/plain, */*',
            },
            body: `{"transactionId":"183VHWyuQMS","content":"${comment}"}`
        }).then(response => {
            expect(response.status).to.equal(200)
        })

////////
API - Local storage

cy.request('POST', 'https://product/io/api/users/login', userCredentials)
.its('body').then(body =>{
const token = body.user.token
cy.wrap(token).as('token')
cy.visit('/', {
win.localStorage.setItem('jwtToken',token)
})
)}

**************************************************************

Cypress CLI:

1. Run Cypress tests in Chrome:
	npx cypress run --browser chrome
	
2. Run specific test:
	npx cypress run --spec "sypress/integration/test2.js"
	
3. enable/disable video recording:
	Open cypress.json or cypress.config.ts -> after 'vewPortWith' add "video": false
	
4. add own commands for running cypress via NPM:
	Open package.json -> in "script" section add parametr with command ->
	-> "cypress:run": "npx cypress run" -> in the terminal type npm run cypress:run ->
	'npx cypress run' will be executed
	
*************************************************************

Reporting

1. Open https://docs.cypress.io/guides/tooling/reporters (multiple reporters section)
2. Examples: install reporters	
	npm install --save-dev cypress-multi-reporters mocha-junit-reporter
3. Add to 'cypress.config.ts' :
	export default defineConfig({
  reporter: 'cypress-multi-reporters',
  reporterOptions: {
    configFile: 'reporter-config.json',
  },
4. Create 'reporter-config.json' file in root of project
5. Paste into 'reporter-config.json':
	import { defineConfig } from 'cypress'
   export default defineConfig({
   reporterEnabled: 'spec, mocha-junit-reporter',
   mochaJunitReporterReporterOptions: {
    mochaFile: 'cypress/results/results-[hash].xml',
    },
   })
6. remove 'spec' in 'reporter-config.json' and modify path if want to save reports into another folder: 
	mochaFile: 'cypress/results/junit/results-[hash].xml'
7. Add into 'package.json' to scripts section deleting reports before run test:
	{
	"scripts": {
		"delete:reports": "rm cypress/results/* || true",
		"prereport": "npm run delete:reports",
		"report": "cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json"
	}
	}
8. install mochawesome reporter:
	npm install --save-dev mochawesome mochawesome-merge mochawesome-report-generator
	where:
	mochawesome: it is reporter
	mochawesome-merge: it is merging reports into single report
	mochawesome-report-generator: to generate html report
9. install junit-merge to merge junit reports into single file:
	npm install -g junit-merge
	
10. Add next configuration into 'reporter-config.json' file:
	import { defineConfig } from 'cypress'
	reporterEnabled: 'mocha-junit-reporter, mochawesome',
	mochaJunitReporterReporterOptions: {
    mochaFile: 'cypress/results/results-[hash].xml',
    },
	reporterOptions: {
    reportDir: 'cypress/results/mochawesome',
    overwrite: false,
    html: false,
    json: true,
  },
})
11. Merge single files into one report (mochawesome and results):
Create into 'package.json' in script section next subscripts:
	"mochawesome:merge": "npx mochawesome-merge \"cypress/results/mochawesome/*.json\" > mochawesome.json && npx marge mochawesome.json",
    "junit:merge": "npx junit-merge -d cypress/results/junit -o cypress/results/junit/result.xml",
then add script there for running both types of reports:
	"cypress:report": "npm run junit:merge && npm run mochawesome:merge",
also make sure that added script for deletion of reports:
	 "delete:reports": "yarn del \"cypress/results/junit/*\" --force",
then add script to run specific test
	"cypress:test":"cypress run --spec \"cypress/tests/v2/api/*\"",
and script for running test with deletion reports before and generation of reports after test running:
	"cypress:e2e": "npm run delete:reports && npm run cypress:test && npm run cypress:report",
   
12. Run test with reports:
	npm run cypress:e2e
	
	
*********************************************************

Cross browser testing

1. add command in the <script> section of 'package.json':
 run in the HEADLESS mode:
	"cy:run_spec": "npx cypress run --spec 'cypress/e2e/test1.spec.js'"
	
 run test in edge browser in the headless mode:
	"cy:run_spec": "npx cypress run --spec 'cypress/e2e/test1.spec.js' --browser edge"
 run test in firefox browser in the HEADED mode:	
	"cy:run_spec": "npx cypress run --spec 'cypress/e2e/test1.spec.js' --browser firefox --headed"
	
2. run specific test in different browser => add the next in test:

		it ('test2', {browser: 'chrome'}, () =>{
		//steps
		)
 in this case if tests will be run in firefox browser test with different browser will be skipped

3. avoid to run in some browser specific test:
		it ('test2', {browser: '!chrome'}, () =>{
		//steps
		)
 in this case if tests will be run in any browser test with specified  browser with '!' will be skipped if test is run in this browser

4. Run test in Webkit browser engine:

   - add "experimentalWebKitSupport": true to cypress.config file
   - install playwright-webkit: 
		npm install --save-dev playwright-webkit
   - run test with using WebKit:
		npx cypress run --spec 'cypress/e2e/test1.spec.js' --browser webkit --headed
		
*************************************************************

Shadow DOM:

if some element (e.g. 'id=container') in DOM is located inside of shadow root ('#shadow-root') to access that element we need to get shadow host element before root and add shadow():

cy.visit('https://www.test.io/open)

cy.get('#app').shadow().find('#container')

***************************************************************

Dashboard: 

1. go to cypress web site and log in
2. Open cypress web runner from terminal: "npx cypress open"
3. Click Runs -> Setup project to record -> Log in to Dashboard -> Set project
4. Copy project id from runner and paste into cypress.config
5. copy "--record --key xxxxxxx" and paste into script for executing test ( e.g. into 'cypress:e2e' command) 
6. To record vide add into cypress.config.json: "video":true
7. Run test and see dashboard on web


A few browsers in parallel and show on dashboard:

"cy:run_browser":"npm run cy:run_spec -- --browser firefox --group Firefox --ci-build-id 1 & npm run cy:run_spec -- --browser chrome --group Chrome --ci-build-id 1"


Parallel testing using CI:

1. Prepare "jenkins" file
	pipeline {
	agent anytools {nodejs "node"}
	stages {
		stage ('cypress parallel tests') {
		parallel {
		stage ('Tester A'){
		steps {
		sh "npm run cy:run"
		}
		}
		stage ('Tester B'){
		agent {
			label "mac"
		}
		steps {
		sh "npm run cy:run"
		}
		} 
		}
		}
	}
	}
	
2. Add --parallel into run command of package.json file:
	"cy:run:": "npx cypress run --headless --record --key xxxxxxx --parallel"
 (when running from CICD --ci-build-id flag should not be used)
3. Open jenkins and run build

**************************************************************

Visual testing (cypress-image-snapshot) 
https://github.com/simonsmith/cypress-image-snapshot

1. Install  cypress-image-snapshot
	npm install --save-dev @simonsmith/cypress-image-snapshot
	
2. Add the following into the cypress.config.json
	const {addMatchImageSnapshotPlugin} = require('@simonsmith/cypress-image-snapshot/plugin')

	module.exports = defineConfig({	
	e2e: {
    baseUrl: 'http://localhost:4200',
    setupNodeEvents(on) {
      addMatchImageSnapshotPlugin(on)
    },
	supportFile: 'cypress/support/index.js'
	}
	});
	
3. Make sure that index.js contains "import './commands.js';"

4. Add the following to commands.js:
	import {addMatchImageSnapshotCommand} from '@simonsmith/cypress-image-snapshot/command';

	addMatchImageSnapshotCommand();

5. Ensure that the types are included in your 'tsconfig.json'
	{
	"compilerOptions": {
		// ...
	},
	"include": ["@simonsmith/cypress-image-snapshot/types"]
	}

6. Run test with the following:
	 cy.get('body').then(body =>{
            cy.wait(1000)
            cy.wrap(body).matchImageSnapshot('homePage')
        })
		
When test is run firstly the expected screenshots are created with names but the next run compares files.
To apply custom path for snapshots add the following into the 'command.js' file:

	addMatchImageSnapshotCommand({
	customSnapshotsDir: `/cypress/e2e/snapshots/${Cypress.spec.name}`
	})
	
	
*******************************************************************

Try and Catch

const person ={
   firstName: 'John',
   lastName: 'Smith',
   set fullName(value){
	if(typeof value !== 'string')
	   throw new Error('Value is not a string')
	   const parts=value.split(' ')
	   if (parts.length !=2)
			throw new Error ('Enter a first or last name!')
	   this.firstName = parts[0];
	   this.lastName = parts[1];
   }
}

try {
   person.fullName = null;
} 
catch (e) {
alert(e)
}
console.log(person)

**********************************************************

PLAY AUDIO:

function play() {
  var audio = new Audio('https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3');
  audio.play();
}

**********************************************************

STRING - remove/change letters in text:
let string = "Javascript is awesome, isn't it?!";

// Removing the comma
let newString = string.replace(',', '');

// Removing all 'o' characters
let newString = string.replace(/o/g, '');

// Removing all spaces
let newString = string.split(' ').join('');

// Removing the first 5 characters:
let newString = string.slice(5);

// Removing the last 3 characters from a string
let newString = string.slice(0, -3);